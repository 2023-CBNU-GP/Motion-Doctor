import Navigation from "@md/components/navigation";
import Head from "next/head";
import WebCam from "@md/components/webcam";
import Message from "@md/components/modal/message";
import Timer from "@md/components/modal/timer";
import { CourseDetail, VideoResult } from "@md/interfaces/course.interface";
import { UserInfo } from "@md/interfaces/user.interface";
import { useRouter } from "next/dist/client/router";
import { useEffect, useRef, useState } from "react";
import axiosClient from "@md/utils/axiosInstance";

export default function TestItem() {
    const [type, setType] = useState<string>();
    const [courseDetail, setCourseDetail] = useState<CourseDetail>();
    const [isModal, setIsModal] = useState<boolean>(false);

    const vidRef = useRef<any>(null);
    const [isPause, setIsPause] = useState(false);
    const [tabIdx, setTabIdx] = useState(0);
    const [time, setTime] = useState<number>(0);
    const [user, setUser] = useState<UserInfo>();

    const [videoResult, setVideoResult] = useState<VideoResult>();
    const [isCaptured, setIsCaptured] = useState<boolean>(false);

    const router = useRouter();

    // 첫 렌더링 때 특정 코스에 대한 전체 데이터 불러오는 api
    useEffect(() => {
        if (!router.isReady) return;
        else {
            alert("**새로고침이 될 시, 기존 테스트 데이터들이 모두 삭제됩니다**");
            const href = decodeURI(router.query.id as string);
            axiosClient.get('/api/user').then((res) => {
                setUser(res.data);
            })
            setType(href);
        }
    }, [router.isReady]);

    useEffect(() => {
    }, [isModal]);

    useEffect(() => {
        if (type) {
            axiosClient.post('/api/video_list', {type: type}).then(res => {
                console.log(res.data.data);
                setCourseDetail(res.data.data);
            });
        }
    }, [type]);

    useEffect(() => {
        if (time >= 11) {
            vidRef.current.play();
        } else {
            vidRef.current?.pause();
        }
    }, [time]);

    const handlePlayVideo = () => {
        if (!isPause) {
            vidRef.current.play();
        } else {
            vidRef.current.pause();
        }
    }

    return (
        <div className="h-screen overflow-hidden">
            <Head>
                <title>모션 닥터 | 자세 검사</title>
                <meta name="description" content="Generated by create next app"/>
                <meta name="viewport" content="width=device-width, initial-scale=1"/>
                <link rel="icon" href="/favicon.ico"/>
            </Head>

            {
                (time != 11 && 0 != time) && <Timer time={time}></Timer>
            }

            {
                (isModal && videoResult?.message != -1 && videoResult != undefined) && <Message setIsModal={setIsModal}
                                                                                                title={'재활코스 등록을 완료하였습니다'}
                                                                                                content={'수고하셨습니다. 재활코스 등록을 완료하였습니다. 담당의사의 피드백을 기다려주세요.'}
                                                                                                uid={user?.uid!}
                                                                                                type={type!}/>
            }

            {
                (isModal && videoResult?.message == -1) && <Message setIsModal={setIsModal}
                                                                    setVideoResult={setVideoResult}
                                                                    title={'에러'}
                                                                    content={'자세를 인식할 수 없습니다. 주변을 깔끔하게 하고 다시 촬영해주세요.'}
                />
            }

            {
                (isModal && videoResult == undefined && isCaptured) && <Message setIsModal={setIsModal}
                                                                                title={'로딩 중'}
                                                                                content={'동영상 저장중입니다. 잠시만 기다려주세요'}
                />
            }

            <Navigation></Navigation>

            <div className="flex h-full">
                <div className="h-full w-[20%] flex flex-col">
                    <div
                        className="flex h-full flex-col drop-shadow-sm overflow-y-scroll divide-y divide-stone-200 divide-solid">
                        <div className="py-10 px-6 gap-0.5 flex flex-col">
                            <div className="flex gap-2 text-sm">
                                <div><label
                                    className="text-color-primary-600 font-semibold">{courseDetail?.doctor_hospitalName}</label> 병원
                                </div>
                                <div><label
                                    className="text-color-primary-600 font-semibold">{courseDetail?.doctor_name}</label> 의사님의
                                </div>
                            </div>
                            <div className="text-lg"><label
                                className="font-bold">{courseDetail?.courseName}</label> 재활 목록
                            </div>
                        </div>
                        {
                            courseDetail && courseDetail?.trainList.map((item, idx) => {
                                return <div key={idx} onClick={() => {
                                    setTabIdx(idx);
                                }}
                                            className={`${idx === tabIdx && "bg-color-primary-100 font-bold"} py-5 px-3 text-center cursor-pointer `}>
                                    {courseDetail.trainList[idx]}
                                </div>
                            })
                        }
                    </div>

                    <button disabled={!isCaptured}
                            className={`disabled:cursor-not-allowed fixed w-[20%] inset-x-0 bottom-0 py-5 px-3 text-center cursor-pointer`}
                            onClick={() => setIsModal(true)}>자세등록하기
                    </button>
                </div>
                <div className="h-full w-[40%] relative">
                    <div className='w-full h-full z-0'>
                        <WebCam typeData={type! as string}
                                name={courseDetail?.trainList[tabIdx] as string}
                                setTime={setTime}
                                setVideoResult={setVideoResult}
                                setIsCaptured={setIsCaptured}
                        ></WebCam>
                    </div>
                </div>
                <div className="h-full w-[40%]">
                    <div className={"flex h-[5%] bg-black text-white items-center px-3 justify-center font-bold"}>
                        아래의 영상을 보고 따라하세요
                    </div>
                    {courseDetail &&
                        <video controls
                               src={process.env.NEXT_PUBLIC_API_KEY + '/media/' + courseDetail.filePathList[tabIdx]}
                               style={{width: "100%", height: "88%", background: 'black', cursor: 'pointer'}}
                               onClick={() => {
                                   setIsPause(!isPause);
                                   handlePlayVideo();
                               }}
                               ref={vidRef}
                        ></video>
                    }
                </div>
            </div>
        </div>
    );
}

