import { useEffect, useState } from "react";
import axios from "@md/utils/axiosInstance";
import axiosClient from "@md/utils/axiosInstance";
import { removeCookie } from "@md/utils/cookies";
import { useRouter } from "next/router";
import Head from "next/head";
import Navigation from "@md/components/navigation";
import Layout from "@md/components/layout";

export default function User() {
    const router = useRouter();

    const [loading, setLoading] = useState<boolean>(false);
    const [isModifing, setIsModifing] = useState(false);
    const [isWithdraw, setIsWithdraw] = useState(false);

    const [userId, setUserId] = useState('');
    const [userName, setUserName] = useState('');
    const [userEmail, setUserEmail] = useState('');

    const [pw, setPw] = useState('');
    const [newPw, setNewPw] = useState('');
    const [confirmNewPw, setconfirmNewPw] = useState('');
    const [invalidConfirmPw, setInvalidConfirmPw] = useState(true);
    const [invalidNewPw, setInvalidNewPw] = useState(true);

    const [wdPw, setwdPw] = useState('');

    const getMe = async () => {
        return await axios.get('api/user');
    };

    useEffect(() => {
        if (!loading) {
            getMe().then(response => {
                setUserName(response.data.name);
                setUserId(response.data.id);
                setUserEmail(response.data.email);
            })
        }
    }, [loading]);

    const checkConfirmPW = () => {
        if (confirmNewPw) {
            if (confirmNewPw === newPw) {
                setInvalidConfirmPw(true);
            } else {
                setInvalidConfirmPw(false);
            }
        }
    };

    const checkPW = () => {
        if (pw) {
            const regExp = /^.*(?=^.{8,15}$)(?=.*\d)(?=.*[a-zA-Z])(?=.*[!@#$%^&+=]).*$/;
            if (pw.match(regExp) === null) {
                setInvalidNewPw(false);
            } else {
                setInvalidNewPw(true);
            }
        }
    };

    useEffect(() => {
        if (newPw) {
            checkPW();
        }
        if (confirmNewPw) {
            checkConfirmPW();
        }
    })

    return (
        <>
            <Head>
                <title>모션 닥터 | 자세 등록</title>
                <meta name="description" content="Generated by create next app"/>
                <meta name="viewport" content="width=device-width, initial-scale=1"/>
                <link rel="icon" href="/favicon.ico"/>
            </Head>

            <Navigation></Navigation>

            <div
                className="w-screen h-32 flex mt-16 bg-gray-100 px-5 py-3 justify-center border-y-2 border-gray-200 mb-10">
                <div className="w-[70%] flex items-center gap-4">
                    <div>
                        <label className="font-bold text-lg">{userName}님, 환영합니다</label>
                    </div>
                </div>
            </div>

            <Layout>
                <div className="w-[70%] flex flex-col gap-10 mb-16">
                    <div>
                        <div className="font-bold mb-4">내 정보</div>
                        <div className="w-full flex justify-center flex-col gap-5">
                            <table className="border-collapse border border-gray-200 table-auto w-[90%]">
                                <tbody>
                                <tr>
                                    <td className="border border-gray-300 py-2 px-2 bg-gray-300">이름</td>
                                    <td className="border border-gray-300 px-2">{userName}</td>
                                </tr>
                                <tr>
                                    <td className="border border-gray-300 py-2 px-2 bg-gray-300">사용자id</td>
                                    <td className="border border-gray-300 px-2">{userId}</td>
                                </tr>
                                <tr>
                                    <td className="border border-gray-300 py-2 px-2 bg-gray-300">이메일</td>
                                    <td className="border border-gray-300 px-2">{userEmail}</td>
                                </tr>
                                </tbody>
                            </table>

                            <div className="flex flex-col">
                                {
                                    isModifing && <div className="bg-gray-50 w-[90%] p-2 mb-5 flex flex-col gap-3">
                                        <input type="password"
                                               onChange={(e) => {
                                                   setPw(e.target.value)
                                               }}
                                               placeholder="현재 비밀번호"
                                               className="w-full focus:outline-none border border-gray-300 rounded-sm pl-1 py-1"/>
                                        <input type="password"
                                               onChange={(e) => {
                                                   setNewPw(e.target.value)
                                               }}
                                               placeholder="변경할 비밀번호"
                                               className="w-full focus:outline-none border border-gray-300 rounded-sm pl-1 py-1"/>
                                        {
                                            invalidNewPw ? <></> :
                                                <div className="text-red-500 text-sm">암호는 특수문자, 문자, 숫자 포함 형태의 8~15자리
                                                    이내여야 합니다.</div>
                                        }
                                        <input type="password"
                                               onChange={(e) => {
                                                   setconfirmNewPw(e.target.value)
                                               }}
                                               placeholder="변경할 비밀번호 확인"
                                               className="w-full focus:outline-none border border-gray-300 rounded-sm pl-1 py-1"/>
                                        {
                                            invalidConfirmPw ? <></> :
                                                <div className="text-red-500 text-sm">비밀번호와 일치하지 않습니다. 비밀번호를
                                                    확인해주세요</div>
                                        }
                                    </div>
                                }
                                <button onClick={() => {
                                    if (isModifing) {
                                        const data = {
                                            "id": userId,
                                            "current_password": pw,
                                            "new_password": newPw
                                        };
                                        axiosClient.post('api/modifypw', data).then(response => {
                                            if (response.status === 200) {
                                                alert('비밀번호 변경이 완료되었습니다.');
                                                setIsModifing(!isModifing);
                                            } else {
                                                alert('비밀번호를 확인해주세요');
                                            }
                                        });
                                    } else {
                                        setIsModifing(!isModifing);
                                    }
                                }}
                                        className="bg-blue-500 hover:bg-blue-400 text-white font-bold py-1 px-5 rounded-md w-fit">{isModifing ? '비밀번호 변경 완료하기' : '비밀번호 변경하기'}</button>
                            </div>
                        </div>

                        <div>
                            <div onClick={() => {
                                setIsWithdraw(!isWithdraw);
                            }} className="font-bold mt-5 underline cursor-pointer hover:text-blue-500">탈퇴하기
                            </div>
                            {
                                isWithdraw && <div className="bg-gray-50 w-[90%] p-2 mb-5 flex flex-col gap-3">
                                    <input type="password"
                                           onChange={(e) => {
                                               setwdPw(e.target.value)
                                           }}
                                           placeholder="비밀번호를 입력해주세요"
                                           className="w-full focus:outline-none border border-gray-300 rounded-sm pl-1 py-1"/>
                                    <button onClick={() => {
                                        if (isWithdraw) {
                                            axiosClient.post('api/withdraw', {'password': wdPw}).then((response) => {
                                                if (response.status === 200) {
                                                    alert('탈퇴가 완료되었습니다.');
                                                    removeCookie('jwt');
                                                    router.push('/');
                                                } else {
                                                    alert('비밀번호를 확인해주세요');
                                                }
                                            });
                                        } else {
                                            setIsModifing(!isModifing);
                                        }
                                    }}
                                            className="bg-blue-500 hover:bg-blue-400 text-white font-bold py-1 px-5 rounded-md w-fit">탈퇴하기
                                    </button>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </Layout>
        </>
    );
};